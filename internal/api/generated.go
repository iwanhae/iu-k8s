// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for HealthResponseStatus.
const (
	Healthy   HealthResponseStatus = "healthy"
	Unhealthy HealthResponseStatus = "unhealthy"
)

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	// Avatar User avatar URL
	Avatar *string `json:"avatar,omitempty"`

	// Email User email address
	Email openapi_types.Email `json:"email"`

	// Name User full name
	Name string `json:"name"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error code
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`

	// Timestamp Error timestamp
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	// Status Health status
	Status HealthResponseStatus `json:"status"`

	// Timestamp Timestamp of the health check
	Timestamp time.Time `json:"timestamp"`

	// Version Application version
	Version *string `json:"version,omitempty"`
}

// HealthResponseStatus Health status
type HealthResponseStatus string

// PaginationInfo defines model for PaginationInfo.
type PaginationInfo struct {
	// HasMore Whether there are more items available
	HasMore *bool `json:"hasMore,omitempty"`

	// Limit Maximum number of items returned
	Limit int `json:"limit"`

	// Offset Number of items skipped
	Offset int `json:"offset"`

	// Total Total number of items available
	Total int `json:"total"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	// Avatar User avatar URL
	Avatar *string `json:"avatar,omitempty"`

	// Email User email address
	Email *openapi_types.Email `json:"email,omitempty"`

	// IsActive Whether the user is active
	IsActive *bool `json:"isActive,omitempty"`

	// Name User full name
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Avatar User avatar URL
	Avatar *string `json:"avatar,omitempty"`

	// CreatedAt User creation timestamp
	CreatedAt time.Time `json:"createdAt"`

	// Email User email address
	Email openapi_types.Email `json:"email"`

	// Id User unique identifier
	Id openapi_types.UUID `json:"id"`

	// IsActive Whether the user is active
	IsActive *bool `json:"isActive,omitempty"`

	// Name User full name
	Name string `json:"name"`

	// UpdatedAt User last update timestamp
	UpdatedAt time.Time `json:"updatedAt"`
}

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Pagination PaginationInfo `json:"pagination"`
	Users      []User         `json:"users"`
}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// Limit Maximum number of users to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of users to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List users
	// (GET /api/v1/users)
	ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams)
	// Create a new user
	// (POST /api/v1/users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /api/v1/users/{userId})
	DeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Get user by ID
	// (GET /api/v1/users/{userId})
	GetUserById(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Update user
	// (PUT /api/v1/users/{userId})
	UpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Health check endpoint
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List users
// (GET /api/v1/users)
func (_ Unimplemented) ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user
// (POST /api/v1/users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user
// (DELETE /api/v1/users/{userId})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by ID
// (GET /api/v1/users/{userId})
func (_ Unimplemented) GetUserById(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user
// (PUT /api/v1/users/{userId})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check endpoint
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users", wrapper.ListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/users/{userId}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{userId}", wrapper.GetUserById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/users/{userId}", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY32/bNhD+V4jbHtXYWTug0NOSdWiDtUPRNthD4QdGPNtsxR8hj1mNwv/7QNKS7Iiq",
	"WywNMqBPtkTqu7vvPt6R/AyNUdZo1OSh/gy+WaPi6e/vDjnhpUf3Bq8DeoovrTMWHUlMU/gNJ+7iP4G+",
	"cdKSNBpqiB+xPMgu37yECpbGKU5QQ3ASKqCNRajBk5N6BdsKUHHZTgClMcaFcOj9Plb+qICmucIJsGVo",
	"W5bGK1D800vUK1pDfTqfV6Ck7p9HqNsKHF4H6VBA/b63naAW/Wxz9QEbij784Zxxb9Bboz2OqRNIXLZ+",
	"7OWZEDL+5S3DCMG6mQUbacIYIplmjRFYIkeh93xV4OdFUFw/csgFv2pxZ72bXQAiqdATV3bKg2HCXtIE",
	"J3wUR+AoxSm6weESyy+Qt7SeptkTp1BgOX/HdsMVoA4q2lyn9xuoIOju/+LbYn/XDTGzZLRGlnFYs8bm",
	"41cyUcENOp/wRvqwtpUNj0+sm3SMyT7Mwe0Sma/5SuqEfKGXZkzmmvtXxhWU8/caaY0uRuuQcYdMGYdM",
	"Eiof64Bso6IGN6+MaZHraLOVStIY8RX/JFVQTAd1hS4ymcEcUnAaxYAlNeEKXcQyy6XHAthft0D8R2nt",
	"BAYZ4oVC9C6+HnlTCK2HupWCHGfvY2eolIZLK/6vhVf6s4bkzZclwkIEl57xPLcki+9Uwcdce3Tfk94m",
	"NVFxRhNgaTwu5W+tlXeeOTEBFbS8DsikQE1yKdEdRB2kOK6DJQ8tQU0uYPXwZFFBSAtuOkkt98TypP/a",
	"0xJdB3uHfY3su7KYUKufbna2r9/x6WeHS6jhp9mww5vttnezW5U+chCh42epsh37Pi2bYT1x5/hmFGuG",
	"rPbdGgcVP5K7btMYTbxJWdiJG3yw1jj6DT9xZVs8aYzqiKvh7PUFe5snRGcOM3fOm4+oBYuTlsaxi8tH",
	"fz71zDqTDMdeSG1E2Q2cvb6AvbYLpyfzk3nqKhY1txJqeHwyP3mcAqJ1omjGrZzdnM568la5/cSkZHYF",
	"1PBSerrsuXBcIaXp7483vQTMyOz6HkSuoIbrgG4z8ND1lpydgzV3Ok+rIcIOa2H3VOpZ062zdyV2zwlH",
	"+uZW8GTf9LxgehHFk5WdqPxlPu80gTqxyoedz+yDzyIfDB2T67BukuYOw4wp6oOMSX9yh9YPTwIF6+dc",
	"MLdr9dsKfr1P22/R3cSGkfbacdgHpbjbdKR0i5j4yg+LerGtwBpfEPtwaoRcDdDTuRGbO4tofCzdHhae",
	"2Ga2IzGd3qmYSkwO/RwF86Fp0PvYlDY/9JT1lDPHONP4T9JVQVbb6rCozj7HnwuxzbWkRcKx5p6l9zvN",
	"fbHCphxdPOvKVyzkQ/XKluC2lvar2ZGNT6GIPZnYU+RYSkJ5cn/JSp5oQ2xpghYPSSs5pVMqqcqN9jmm",
	"Pnu+SVl8YEKY308B6m6Lfkipk9JzzF2MXW1yxgutLBTUNBzDH4SY7r6Tju8ZvqqT3pOQdyehB9VJf6yo",
	"tKKycL7UwvOV5+SJ6DlSvoCF76iuW1fDhRAPL4EfEMEv9m6MGWphjdS0R/WO3kVC9QmnVJee4Q22xirU",
	"xPIsqCC4eK5eE9l6NmtNw9u18VQ/nT+dw3ax/TcAAP//tnqUlBEaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
