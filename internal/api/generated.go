// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for ReadinessResponseStatus.
const (
	NotReady ReadinessResponseStatus = "not_ready"
	Ready    ReadinessResponseStatus = "ready"
)

// Defines values for SetLogLevelParamsLevel.
const (
	Debug SetLogLevelParamsLevel = "debug"
	Error SetLogLevelParamsLevel = "error"
	Info  SetLogLevelParamsLevel = "info"
	Warn  SetLogLevelParamsLevel = "warn"
)

// Defines values for SetLogLevelParamsFormat.
const (
	Json SetLogLevelParamsFormat = "json"
	Text SetLogLevelParamsFormat = "text"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error code
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`

	// Timestamp Error timestamp
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// MetadataPagination defines model for MetadataPagination.
type MetadataPagination struct {
	// Cursor Cursor for pagination
	Cursor int `json:"cursor"`

	// HasMore Whether there are more items to fetch
	HasMore bool `json:"hasMore"`
}

// ReadinessResponse defines model for ReadinessResponse.
type ReadinessResponse struct {
	// Message Human-readable message
	Message *string `json:"message,omitempty"`

	// Status Readiness status
	Status ReadinessResponseStatus `json:"status"`

	// Timestamp Timestamp of the readiness check
	Timestamp time.Time `json:"timestamp"`

	// Version Application version
	Version string `json:"version"`
}

// ReadinessResponseStatus Readiness status
type ReadinessResponseStatus string

// SetLogLevelParams defines parameters for SetLogLevel.
type SetLogLevelParams struct {
	// Level The desired log level. If not provided, the current level is maintained.
	Level *SetLogLevelParamsLevel `form:"level,omitempty" json:"level,omitempty"`

	// Format The desired log format. If not provided, the current format is maintained.
	Format *SetLogLevelParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// SetLogLevelParamsLevel defines parameters for SetLogLevel.
type SetLogLevelParamsLevel string

// SetLogLevelParamsFormat defines parameters for SetLogLevel.
type SetLogLevelParamsFormat string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Sets the log level and format dynamically
	// (GET /debug/log)
	SetLogLevel(w http.ResponseWriter, r *http.Request, params SetLogLevelParams)
	// Readiness check endpoint
	// (GET /readyz)
	GetReadiness(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Sets the log level and format dynamically
// (GET /debug/log)
func (_ Unimplemented) SetLogLevel(w http.ResponseWriter, r *http.Request, params SetLogLevelParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Readiness check endpoint
// (GET /readyz)
func (_ Unimplemented) GetReadiness(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SetLogLevel operation middleware
func (siw *ServerInterfaceWrapper) SetLogLevel(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SetLogLevelParams

	// ------------- Optional query parameter "level" -------------

	err = runtime.BindQueryParameter("form", true, false, "level", r.URL.Query(), &params.Level)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "level", Err: err})
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", r.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetLogLevel(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetReadiness operation middleware
func (siw *ServerInterfaceWrapper) GetReadiness(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReadiness(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/debug/log", wrapper.SetLogLevel)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/readyz", wrapper.GetReadiness)
	})

	return r
}

type SetLogLevelRequestObject struct {
	Params SetLogLevelParams
}

type SetLogLevelResponseObject interface {
	VisitSetLogLevelResponse(w http.ResponseWriter) error
}

type SetLogLevel200JSONResponse struct {
	// Format The new log format.
	Format *string `json:"format,omitempty"`

	// Level The new log level.
	Level *string `json:"level,omitempty"`
}

func (response SetLogLevel200JSONResponse) VisitSetLogLevelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetLogLevel400JSONResponse ErrorResponse

func (response SetLogLevel400JSONResponse) VisitSetLogLevelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetReadinessRequestObject struct {
}

type GetReadinessResponseObject interface {
	VisitGetReadinessResponse(w http.ResponseWriter) error
}

type GetReadiness200JSONResponse ReadinessResponse

func (response GetReadiness200JSONResponse) VisitGetReadinessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetReadiness500JSONResponse ErrorResponse

func (response GetReadiness500JSONResponse) VisitGetReadinessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Sets the log level and format dynamically
	// (GET /debug/log)
	SetLogLevel(ctx context.Context, request SetLogLevelRequestObject) (SetLogLevelResponseObject, error)
	// Readiness check endpoint
	// (GET /readyz)
	GetReadiness(ctx context.Context, request GetReadinessRequestObject) (GetReadinessResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// SetLogLevel operation middleware
func (sh *strictHandler) SetLogLevel(w http.ResponseWriter, r *http.Request, params SetLogLevelParams) {
	var request SetLogLevelRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetLogLevel(ctx, request.(SetLogLevelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetLogLevel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetLogLevelResponseObject); ok {
		if err := validResponse.VisitSetLogLevelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetReadiness operation middleware
func (sh *strictHandler) GetReadiness(w http.ResponseWriter, r *http.Request) {
	var request GetReadinessRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetReadiness(ctx, request.(GetReadinessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReadiness")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetReadinessResponseObject); ok {
		if err := validResponse.VisitGetReadinessResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWWW/jNhD+K8S0j/KxPQBDb+mB1mgWDZIWfVgYxYQcS9zwWnLkXXfh/16Qku0kUo5F",
	"gb4EjDjHN/N9w/FnkN4G78hxgvozJNmSxXL8OUYfrykF7xLlDyH6QJE1lWtFjNoMxySjDqy9gxoulNL5",
	"iEZQDiGOlhXwPhDU4G/fk2Q4VFAMxiFKaiG9orNT4qhdk50spYQNjd1+7Sy6WSRUeGtoyH60ngjE2lJi",
	"tOEpBGeDCrY+WmSoQSHTLN+MQx4qiPSh05EU1O+G6s6ANxMdeEuMChmvsNEO++yPWy27mKba9GP5LrY+",
	"inB2PyXRjqmhmLO0mN76ONGyv1rilqLIf0hgJGF9JKGZbBLsxZZYtueQt94bQjeqdEB4TjRV6jWh0o5S",
	"elpUr6X2GVITI3cTsjxlF4NFBeQ6m9HnsHuowHn+uz9vvkwtfxyvhN/mVop4SiZbknevlE8FO4ppkMCj",
	"oQrBaFkIFkejl+R3qvOew6mGMUHZXbutL4rzjlFyPjq02Wr9p/htlcRNF4KPDBUkg/IOaviKPvGsJRNm",
	"upvdrVIu4yH2H1DekVPi4mpdtDqE+j1QLAWVl0GzuZfm4mp9D3cNb+bL+TJH9oEcBg01fDt/M19CBQG5",
	"LXQvFN12zcL4Jv/XUEHvj0nWCmq4Ib70zSXtyBTPiJaYYoL63YjSloSilHspjG+EyU5zsd4K51mE6Hda",
	"kaoK27KLkRz3NkInYVE7Ru1IzSE3FWr40FEsGuvbaQYM/XubkR7FWKqAgYoKPmLMxPVPyWaC8peA98J7",
	"AXlv9Drog5KnsL9PvcroE09h3WR99qNfGPtmuTyKjVyhC88yX5Rgp5U0fiuOEzXVAEcf7xc/NWo9A896",
	"95xPztnE7DyMc+kbkYhZuyaJLuSpVyJ1UlJK286Yfcbw3Rc24OtI2zxyi/PSXgwbe/FwXU8gWrsdGq2E",
	"dqErjA967TdIbmX2SZ21GPf9sKQiklMrBDp1lIraO7RaYq6kAsYmDxFYdNiQzcVscrRFeU7/eXIgfyE+",
	"vcvwH9XxXHPGq2eiQaMNcajg+/+ToRuKO4r975ZHZFw/XCiCnApeO36y99m7hJt63H7KbPqQbUVvBRV0",
	"0UANLXOoFwvjJZrWJ65Xq9UKDpvDvwEAAP//rCGoWyoKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
